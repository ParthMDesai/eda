fn=expression(2*x1^2 + 7*x1*x2 + 5*x2^2 - 2*x1 -  3*x2)
dfx = deriv(fn, c("x1","x2"))

#Stopping Criteria  abs[fv(i) - fv(i-1)] < 0.005
# step size = 0.135

SC <- 6       #Stopping criteria - Some random value higher than 0.005
alpha = 0.123 # learning rate or Step size

fv = list()   # created empty list to store function values at each iteration
dvx1 = list() # empty list for derivative with respect ti=o x1 variable
dvx2 = list() # empty list for derivative with respect ti=o x2 variable
x1 = list()
x2 = list()

k = 1 # initialization of iterations

#initial Guess Value
x1 = 2
x2 = 1

fv <- as.numeric(eval(fn)) # f(initial guess values [x1=2, xx2=2])

while (k <= 7){
  dv = eval(dfx)
  dvx1[k+1] = .grad[, "x1"]   # extract values with respect to x1 value
  dvx2[k+1] = .grad[, "x2"]   # extract values with respect to x2 value
  
  x1 = x1 - alpha*.grad[, "x1"] # x1 update equation / formula 
  x2 = x2 - alpha*.grad[, "x2"] # x2 update equation / formula
    
  fv[k+1]=eval(fn)
  SC <- abs(as.numeric(fv[k]) - as.numeric(fv[k+1])) # stopping criteria
  
  k=k+1
}

fv = unlist(fv)
fv
dvx1 = unlist(dvx1)
dvx1
dvx2 = unlist(dvx2)
dvx1

# plot the function
x1_data = seq(-5,5, by = 0.5)
x2_data = seq(-5,5, by = 0.5)
library(plot3D)
X =  mesh(x1_data, x2_data) 
x1 = X$x
x2 = X$y
(y = eval(fn))
surf3D(X$x, X$y,y, colvar = y, axes=TRUE, colkey = TRUE, theta = 60, phi = 15,  
       box = FALSE, main="3D Surf plot", xlab="X-value")
plotrgl()  # openGL --> grapns in another window  - Rotatable & Zoomable
